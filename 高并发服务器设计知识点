强迫症使用：
1.c++ thread类底层调用还是使用pthread_create创建线程，不嫌麻烦可以直接使用pthread_create等系统调用来创建和销毁线程；
2.用户态——>中间层（thread等非系统库函数）——->内核态，系统原子调用会少中间层，据说高并发下这样作理论上是程序运行会快一些，但是实际到底快没快没有验证过；
3.c++很多都是把c封装成了一个类方便使用，实际操作中根据个人喜好和特点可以结合使用；

epoll LT和ET：
1.LT : 当套接字可读时，内核将读写事件加入链表中，若不读数据LT通知用户后fd还在就绪链表中，随着fd的增多，就绪链表越大,读取数据后将EPOLLOUT，下次epoll_wait还会取到旧数据,
2.ET: 当套接字可读时，ET在通知用户后，就会把fd从就绪队列里删除；
3.实际服务开发中采用LT模式，支持高并发，减少CPU的使用率；
4.ngnix,采用ET模式，redis,采用LT模式;

数据包:{
  //包头
  ............
  //包体(加密，CRC32校验)
  {
  	//流水号可防止数据重放攻击（每次请求都需要检查流水号是否重复，短时间内重复到一定次数，可以把连接关闭，防止正常请求不能处理）
  }
  ............
}packgData; //此结构可以防止TCP粘包

连接：
struct{
    int sockfd;                                        //套接字
    //读写回调函数
    (void*)(func)      rhandler;                       //读事件的相关处理方法
	  (void*)(func)      whandler;                       //写事件的相关处理方法
    //接收相关buf,以及标志等
   ............
   //发生相关buf,队列深度等
   .............
   
   //心跳，超时回收等
   ................
   
}*p_connection_t;

socket处理:{
//连接池结构
std::list<p_connection_t>      m_connectionList;                      //连接列表【连接池】
std::list<p_connection_t>      m_freeconnectionList;                  //空闲连接列表【这里边装的全是空闲的连接】
std::atomic<int>               m_total_connection_n;                  //连接池总连接数
std::atomic<int>               m_free_connection_n;                   //连接池空闲连接数

//线程池
{
  1.线程池指针
  2.线程池启动标识
  3.等等；
}

//
  pthread_mutex_t                m_connectionMutex;                     //连接相关互斥量，互斥m_freeconnectionList，m_connectionList
	pthread_mutex_t                m_recyconnqueueMutex;                  //连接回收队列相关的互斥量
	std::list<p_connection_t>      m_recyconnectionList;                  //将要释放的连接放这里
	std::atomic<int>               m_totol_recyconnection_n;              //待释放连接队列大小
	int                            m_RecyConnectionWaitTime;              //等待这么些秒后才回收连接
  
 struct epoll_event             m_events[NGX_MAX_EVENTS];              //用于在epoll_wait()中承载返回的所发生的事件
	//消息队列
	std::list<char *>              m_MsgSendQueue;                        //发送数据消息队列
	std::atomic<int>               m_iSendMsgQueueCount;                  //发消息队列大小
	//多线程相关
	std::vector<ThreadItem *>      m_threadVector;                        //线程 容器，容器里是各个线程
	pthread_mutex_t                m_sendMessageQueueMutex;               //发消息队列互斥量 
	sem_t                          m_semEventSendQueue;                   //处理发消息线程相关的信号量，线程同步 

 //心跳时间到
	int                            m_ifkickTimeCount;                     //是否开启心跳时钟，1：开启   0：不开启		
	pthread_mutex_t                m_timequeueMutex;                      //和时间队列有关的互斥量
	std::multimap<time_t, LPSTRUC_MSG_HEADER>   m_timerQueuemap;          //时间队列	
	size_t                         m_cur_size_;                           //时间队列的大小
	time_t                         m_timer_value_;                        //当前计时队列头部时间值
  
  //防止DDOS攻击计数器，时间等
  ......................
  //多进程时监听套接字
  .........................
}


线程池设计：
{
    static pthread_mutex_t     m_pthreadMutex;      //线程同步互斥量/也叫线程同步锁
    static pthread_cond_t      m_pthreadCond;       //线程同步条件变量
    static bool                m_shutdown;          //线程退出标志，false不退出，true退出
    int                        m_iThreadNum;        //要创建的线程数量
    std::atomic<int>           m_iRunningThreadNum; //线程数, 运行中的线程数，原子操作
    std::vector<ThreadItem *>  m_threadVector;      //线程 容器，容器里是各个线程 
    //接收消息队列相关
    std::list<char *>          m_MsgRecvQueue;      //接收数据消息队列 
	  int                        m_iRecvMsgQueueCount;//收消息队列大小
}






